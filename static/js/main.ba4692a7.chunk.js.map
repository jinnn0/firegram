{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","components/ImgaeGrid.jsx","components/Model.jsx","components/Title.js","hooks/useStorage.js","components/ProgressBar.jsx","components/UploadForm.jsx","App.jsx","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImgaeGrid","setSelectedimg","className","map","div","layout","key","onClick","url","img","src","alt","initial","opacity","animate","transition","delay","Model","selectedImg","e","console","log","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba4692a7.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: 'AIzaSyCvWpMKtZHODq_8oCHnZedUVfEjZmBuRO4',\n  authDomain: 'travelgram-cb139.firebaseapp.com',\n  databaseURL: 'https://travelgram-cb139.firebaseio.com',\n  projectId: 'travelgram-cb139',\n  storageBucket: 'travelgram-cb139.appspot.com',\n  messagingSenderId: '1001911274441',\n  appId: '1:1001911274441:web:5eda21e0b5a355d594f618'\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectStorage, projectFirestore, timestamp };\n","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase/config';\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore\n      .collection(collection)\n      .orderBy('createdAt', 'desc')\n      .onSnapshot((snap) => {\n        const documents = [];\n        snap.forEach((doc) => {\n          documents.push({ ...doc.data(), id: doc.id });\n        });\n        setDocs(documents);\n      });\n\n    return () => unsub();\n  }, [collection]);\n\n  return [docs];\n};\n\nexport default useFirestore;\n","import React from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport { motion } from 'framer-motion';\n\nconst ImgaeGrid = ({ setSelectedimg }) => {\n  const [docs] = useFirestore('user-images');\n\n  return (\n    <div className=\"img-grid\">\n      {docs &&\n        docs.map((doc) => (\n          <motion.div className=\"img-wrap\" layout key={doc.id} onClick={() => setSelectedimg(doc.url)}>\n            <motion.img\n              src={doc.url}\n              alt=\"images\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 1 }}\n            />\n          </motion.div>\n        ))}\n    </div>\n  );\n};\n\nexport default ImgaeGrid;\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\nfunction Model({ selectedImg, setSelectedimg }) {\n  const handleClick = (e) => {\n    console.log(e.target);\n    if (e.target.classList.contains('backdrop')) {\n      setSelectedimg(null);\n    }\n  };\n\n  return (\n    <motion.div className=\"backdrop\" initial={{ opacity: 0 }} animate={{ opacity: 1 }} onClick={handleClick}>\n      {/* <img src={selectedImg} alt=\"large pig\" onClick={(e) => e.stopPropagation()} /> */}\n      <motion.img src={selectedImg} alt=\"large pig\" initial={{ y: '-100vh' }} animate={{ y: 0 }} />\n    </motion.div>\n  );\n}\n\nexport default Model;\n","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  );\n};\n\nexport default Title;\n","import { useState, useEffect } from 'react';\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\n\n// handles file upload and\n// returns values about that upload - upload progress, errors, img url etc\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  // everytime we receive new file value, useEffect will run\n  useEffect(() => {\n    // get a reference to where the file should be saved\n    // creats a ref to a file inside the default firebase storage bucket\n    // when we upload something, using this reference the file should have this name\n    const storageRef = projectStorage.ref(file.name + ' hello');\n    const collectionRef = projectFirestore.collection('user-images');\n\n    // take the file and put it in the reference\n    // async             // whenever the state of the upload changes - progress, complete etc.\n    storageRef.put(file).on(\n      'state_changed',\n      (snap) => {\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n        setProgress(percentage);\n      },\n      (err) => {\n        setError(err);\n      },\n      async () => {\n        const url = await storageRef.getDownloadURL();\n        const createdAt = timestamp();\n\n        collectionRef.add({ url: url, createdAt: createdAt });\n        setUrl(url);\n      }\n    );\n  }, [file]);\n\n  //   return { progress, url, error };\n  return [progress, url, error];\n};\n\nexport default useStorage;\n","import React, { useEffect } from 'react';\nimport useStorage from '../hooks/useStorage';\nimport { motion } from 'framer-motion';\n\nconst ProgressBar = ({ file, setFile }) => {\n  const [progress, url] = useStorage(file);\n\n  useEffect(() => {\n    if (url) {\n      setFile(null);\n    }\n  }, [url, setFile]);\n\n  const style = {\n    width: progress + '%'\n  };\n\n  return (\n    <motion.div\n      className=\"progress-bar\"\n      initial={{ width: 0 }}\n      animate={{ width: progress + '%' }}\n    ></motion.div>\n  );\n};\n\nexport default ProgressBar;\n","import React, { useState } from 'react';\nimport ProgressBar from './ProgressBar';\n\nconst UploadForm = () => {\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  const types = ['image/png', 'image/jpeg'];\n\n  const handleUpload = (e) => {\n    const selected = e.target.files[0];\n\n    if (selected && types.includes(selected.type)) {\n      setFile(selected);\n      setError('');\n    } else {\n      setFile(null);\n      setError('Please select an image file (png or jpeg)');\n    }\n  };\n\n  return (\n    <form>\n      <label>\n        <input type=\"file\" onChange={handleUpload} />\n        <span>+</span>\n      </label>\n      <div className=\"output\">\n        {error && <p>{error}</p>}\n        {file && <p>{file.name}</p>}\n        {file && <ProgressBar file={file} setFile={setFile} />}\n      </div>\n    </form>\n  );\n};\n\nexport default UploadForm;\n","import React from 'react';\nimport { useState } from 'react';\nimport ImgaeGrid from './components/ImgaeGrid';\nimport Model from './components/Model';\nimport Title from './components/Title';\nimport UploadForm from './components/UploadForm';\n\nfunction App() {\n  const [selectedImg, setSelectedimg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImgaeGrid setSelectedimg={setSelectedimg} />\n      {selectedImg && <Model selectedImg={selectedImg} setSelectedimg={setSelectedimg} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}